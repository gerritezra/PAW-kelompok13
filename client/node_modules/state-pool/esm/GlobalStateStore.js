"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.store = exports.GlobalStateStore = void 0;
var GlobalState_1 = require("./GlobalState");
var GlobalStateStore = /** @class */ (function () {
    function GlobalStateStore() {
        this.value = {};
        this.subscribers = [];
        this.LOCAL_STORAGE_UPDATE_DEBOUNCE_TIME = 1000;
    }
    GlobalStateStore.prototype.subscribe = function (itemToSubscribe) {
        if (this.subscribers.indexOf(itemToSubscribe) > -1) {
            // Already subscribed
            return;
        }
        // Subscribe a component to this store
        this.subscribers.push(itemToSubscribe);
    };
    GlobalStateStore.prototype.unsubscribe = function (itemToUnsubscribe) {
        this.subscribers = this.subscribers.filter(function (subscriber) { return subscriber !== itemToUnsubscribe; });
    };
    GlobalStateStore.prototype.onStoreUpdate = function (event) {
        this.subscribers.forEach(function (subscriber) {
            subscriber(event);
        });
    };
    GlobalStateStore.prototype.getStateFromLocalStorage = function (key) {
        try {
            var serializedState = window.localStorage.getItem(key);
            if (serializedState === null) {
                // No state saved
                return undefined;
            }
            return JSON.parse(serializedState);
        }
        catch (err) {
            // Failed to load state
            return undefined;
        }
    };
    GlobalStateStore.prototype.saveStateToLocalStorage = function (key, state) {
        try {
            var serializedState = JSON.stringify(state);
            window.localStorage.setItem(key, serializedState);
        }
        catch (_a) {
            // Ignore write errors
        }
    };
    GlobalStateStore.prototype.deleteStateFromLocalStorage = function (key) {
        return window.localStorage.removeItem(key);
    };
    GlobalStateStore.prototype.setState = function (key, initialValue, _a) {
        var _this = this;
        var _b = _a === void 0 ? { persist: false } : _a, persist = _b.persist;
        if (persist) {
            // Load state from localStorage
            var savedState = this.getStateFromLocalStorage(key);
            if (savedState !== undefined) {
                // Use savedState as the initialValue
                initialValue = savedState;
            }
            else {
                // No need to debounce this because it's executed only once
                this.saveStateToLocalStorage(key, initialValue);
            }
        }
        // Timer for debounce
        var timerId = null;
        var onGlobalStateChange = function (newValue) {
            // Note key, persist & timerId variables depends on the scope
            _this.onStoreUpdate({ key: key, action: 'update', value: newValue });
            if (persist) {
                // Debounce saving state to localStorage because `onGlobalStateChange`
                // is called every time the store state changes. However, it should not
                // be called too often because it triggers the expensive `JSON.stringify` operation.
                clearTimeout(timerId);
                timerId = setTimeout(function () {
                    _this.saveStateToLocalStorage(key, newValue);
                }, _this.LOCAL_STORAGE_UPDATE_DEBOUNCE_TIME);
            }
        };
        onGlobalStateChange.bind(this);
        var onGlobalStateDelete = function () {
            if (persist) {
                // Delete state from localStorage
                _this.deleteStateFromLocalStorage(key);
            }
        };
        onGlobalStateDelete.bind(this);
        var observer = {
            sendUpdateSignal: onGlobalStateChange,
            sendDeleteSignal: onGlobalStateDelete
        };
        // Create key based global state
        this.value[key] = GlobalState_1.createGlobalstate(initialValue);
        this.value[key].subscribe(observer);
    };
    GlobalStateStore.prototype.getState = function (key, config) {
        if (config === void 0) { config = { persist: false }; }
        var defaultValue = config.default;
        var persist = config.persist;
        // Get key based global state
        if (this.value[key] === undefined) { // Global state is not found
            if (defaultValue !== undefined) { // Default value is found
                // Create a global state and use defaultValue as the initial value
                this.setState(key, defaultValue, { persist: persist });
            }
            else {
                // Global state is not found and the default value is not specified
                var errorMsg = [
                    "There is no global state with the key '" + key + "', ",
                    "You are either trying to access a global ",
                    "state which was not created or it was deleted."
                ];
                throw TypeError(errorMsg.join(""));
            }
        }
        return this.value[key];
    };
    GlobalStateStore.prototype.clear = function (fn) {
        // Copy store
        var storeCopy = this.value;
        // Clear store
        this.value = {};
        if (fn) {
            // Run store re-initialization
            fn();
        }
        for (var key in storeCopy) {
            // Notify subscribers to a store that a global state has been removed
            this.onStoreUpdate({ key: key, action: 'delete' });
            // Get global state to remove
            var globalState = storeCopy[key];
            // Rerender all components
            globalState.delete();
        }
    };
    GlobalStateStore.prototype.remove = function (globalStatekey, fn) {
        var _this = this;
        var keys = [];
        if (typeof globalStatekey === 'string') {
            keys = [globalStatekey];
        }
        else {
            keys = globalStatekey;
        }
        var globalStatesToRemove = {};
        keys.forEach(function (key) {
            // Copy global state to remove from a store
            globalStatesToRemove[key] = _this.getState(key);
            // Remove global state from a store
            delete _this.value[key];
        });
        if (fn) {
            // Run global state re-initialization
            fn();
        }
        for (var key in globalStatesToRemove) {
            // Notify subscribers to a store that a global state has been removed
            this.onStoreUpdate({ key: key, action: 'delete' });
            // Get global state to delete
            var globalState = globalStatesToRemove[key];
            // Rerender all components
            globalState.delete();
        }
    };
    return GlobalStateStore;
}());
exports.GlobalStateStore = GlobalStateStore;
// Create store for key based global state
var store = new GlobalStateStore();
exports.store = store;
