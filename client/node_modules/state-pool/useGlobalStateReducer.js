"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useGlobalStateReducer = void 0;
var immer_1 = __importDefault(require("immer"));
var react_1 = require("react");
var GlobalStateStore_1 = require("./GlobalStateStore");
function useGlobalStateReducer(reducer, globalState, config) {
    if (config === void 0) { config = { persist: true }; }
    var _globalState;
    if (typeof globalState === 'string') {
        _globalState = GlobalStateStore_1.store.getState(globalState, config);
    }
    else {
        _globalState = globalState;
    }
    var _a = react_1.useState(), setState = _a[1];
    var isMounted = react_1.useRef(false);
    var currentState = _globalState.getValue();
    var selector = config.selector;
    var patcher = config.patcher;
    function reRender() {
        // re-render if the component is mounted
        if (isMounted.current) {
            setState({});
        }
    }
    function sendUpdateSignal(newState) {
        if (selector && selector(currentState) === selector(newState)) {
            // Do nothing because the selected state has not changed
        }
        else {
            reRender();
        }
    }
    function sendDeleteSignal() {
        reRender();
    }
    var observer = {
        sendUpdateSignal: sendUpdateSignal,
        sendDeleteSignal: sendDeleteSignal
    };
    react_1.useEffect(function () {
        _globalState.subscribe(observer);
        isMounted.current = true;
        return function () {
            _globalState.unsubscribe(observer);
            isMounted.current = false;
        };
    }, []);
    function dispatch(action) {
        var newState = reducer(_globalState.getValue(), action);
        _globalState.setValue(newState);
    }
    function patch(action) {
        // patch back changed node to the global state
        var nodeValue = reducer(selector(currentState), action);
        var newState = immer_1.default(currentState, function (draftCurrentState) {
            return patcher(draftCurrentState, nodeValue);
        });
        _globalState.setValue(newState);
    }
    if (selector) {
        if (patcher) {
            return [selector(currentState), patch];
        }
        else {
            return [selector(currentState), dispatch];
        }
    }
    return [currentState, dispatch];
}
exports.useGlobalStateReducer = useGlobalStateReducer;
